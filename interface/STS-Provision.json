{
  "swagger": "2.0",
  "info": {
    "version": "2.0.1",
    "title": "Provisioning service",
    "description": "(D.03.07.10000) Provisioning service for St√∏ttesystem STS",
    "contact": {
      "name": "Martin Strandbygaard / Safewhere"
    }
  },
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/Anvendersystemer": {
      "get": {
        "summary": "Get a list of all Anvendersystem (user system)",
        "description": "Get a list of all Anvendersystem (user system)",
        "tags": [
          "Service"
        ],
        "operationId": "getAllAnvendersystem",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful response. List of id's of all Anvendersystem objects",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Invalid data supplied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Unknown id",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflicting request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Unavailable",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create a new Anvendersystem (user system)",
        "description": "Create a new `Anvendersystem` (user system)",
        "tags": [
          "Service"
        ],
        "operationId": "createAnvendersystem",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The Anvendersystem (user system) to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Anvendersystem"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "400": {
            "description": "Invalid data supplied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Unknown id",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflicting request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Unavailable",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/Anvendersystemer/{id}": {
      "get": {
        "summary": "Get a specific Anvendersystem (user system)",
        "description": "Get a specific `Anvendersystem` object.",
        "tags": [
          "Service"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the Anvendersystem (user system) to get",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/Anvendersystem"
            }
          },
          "400": {
            "description": "Invalid data supplied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Unknown id",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflicting request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Unavailable",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "Update a specific Anvendersystem (user system)",
        "description": "Update a specific `Anvendersystem` object.",
        "tags": [
          "Service"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the Anvendersystem (user system) to update",
            "type": "string",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "description": "The updated Anvendersystem (user system)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Anvendersystem"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "400": {
            "description": "Invalid data supplied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Unknown id",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflicting request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Unavailable",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a specific Anvendersystem (user system)",
        "operationId": "deleteAnvendersystemById",
        "description": "Delete a specific `Anvendersystem` object.",
        "tags": [
          "Service"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the Anvendersystem (user system) to delete",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "400": {
            "description": "Invalid data supplied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Unknown id",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflicting request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Unavailable",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/Anvendersystemer/{id}/Anvenderkontekster": {
      "put": {
        "summary": "Add a list of Anvenderkontekster (user context) to to the list of Anvenderkontekster for this Anvendersystem (user system)",
        "operationId": "addAnvenderkontekstByAnvendersystemId",
        "description": "Add a list of Anvenderkontekster (user context) to to the list of Anvenderkontekster for this Anvendersystem (user system)",
        "tags": [
          "Service"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the Anvendersystem (user system)",
            "type": "string",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "description": "A list of Anvenderkontekster to add to the list of Anvenderkontekster for this Anvendersystem",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Anvenderkontekst"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "400": {
            "description": "Invalid data supplied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Unknown id",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflicting request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Unavailable",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/Anvendersystemer/{id1}/Anvenderkontekster/{id2}": {
      "delete": {
        "summary": "Delete a specific Anvenderkontekst (user context) from this Anvendersystem (user system)",
        "operationId": "deleteAnvenderkontekstByAnvendersystemId",
        "description": "Delete a specific Anvenderkontekst (user context) from this Anvendersystem (user system)",
        "tags": [
          "Service"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id1",
            "in": "path",
            "description": "The id of the Anvendersystem (user system)",
            "type": "string",
            "required": true
          },
          {
            "name": "id2",
            "in": "path",
            "description": "The CVR of the Anvenderkontekst to delete",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "400": {
            "description": "Invalid data supplied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Unknown id",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflicting request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Unavailable",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/Anvendersystemer/{id}/ImpersonationAssignments": {
      "put": {
        "summary": "Add ImpersonationAssignments on an Anvendersystem (user system)",
        "operationId": "addImpersonationAssignmentsByAnvendersystemId",
        "description": "Add an ImpersonationAssignments on an `Anvendersystem`",
        "tags": [
          "Service"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the Anvendersystem (user system)",
            "type": "string",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "description": "The list of ImpersonationAssignments to add",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ImpersonationAssignment"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "400": {
            "description": "Invalid data supplied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Unknown id",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflicting request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Unavailable",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete an ImpersonationAssignment on an Anvendersystem (user system)",
        "operationId": "deleteImpersonationAssignmentByAnvendersystemId",
        "description": "Delete an ImpersonationAssignment on an `Anvendersystem`",
        "tags": [
          "Service"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the Anvendersystem (user system)",
            "type": "string",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "description": "The ImpersonationAssignment to delete",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ImpersonationAssignment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "400": {
            "description": "Invalid data supplied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Unknown id",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflicting request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Unavailable",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/Anvendersystemer/{id}/RoleAssignments": {
      "put": {
        "summary": "Add a list of RoleAssignments to to the list of RoleAssignments for this Anvendersystem (user system)",
        "operationId": "addRoleAssignmentByAnvendersystemId",
        "description": "Add a list of RoleAssignments to to the list of RoleAssignments for this Anvendersystem (user system). The role assignments are added to the list, and the existing ones are left unchanged. If a role assignment already in the list, is added, then the existing role assignment is replaced with the one being added.",
        "tags": [
          "Service"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the Anvendersystem (user system)",
            "type": "string",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "description": "A list of RoleAssignments to add to the list of RoleAssignments for this Anvendersystem",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RoleAssignment"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "400": {
            "description": "Invalid data supplied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Unknown id",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflicting request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Unavailable",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/Anvendersystemer/{id1}/RoleAssignments/{id2}": {
      "delete": {
        "summary": "Delete a specific RoleAssignment from this Anvendersystem (user system)",
        "operationId": "deleteRoleAssignmentByAnvendersystemId",
        "description": "Delete a specific RoleAssignment from this Anvendersystem (user system)",
        "tags": [
          "Service"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id1",
            "in": "path",
            "description": "The id of the Anvendersystem (user system)",
            "type": "string",
            "required": true
          },
          {
            "name": "id2",
            "in": "path",
            "description": "The unique id of this RoleAssignment. This property is generated by the caller that provisions this role assignment, and is used again by this caller to delete the role assignment. The value of this Id must be URL safe, since it's used in the path in a DELETE request to delete the role assignment.",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "400": {
            "description": "Invalid data supplied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Unknown id",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflicting request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Unavailable",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/Anvendersystemer/{id}/OcesCertifikater": {
      "put": {
        "summary": "Add OCES certificates to a specific Anvendersystem (user system)",
        "operationId": "addOcesCertificatesByAnvendersystemId",
        "description": "Add one or more OCES certificates on a specific `Anvendersystem` object.",
        "tags": [
          "Service"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the Anvendersystem (user system)",
            "type": "string",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "description": "A list of OCES certificates to add to this Anvendersystem (user system).",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "title": "OcesCertifikat",
                "description": "A base64 encoded string representing the certificate for this Anvendersystem (user system). The string MUST be the certificate in PEM format, and MUST NOT contain Begin- and End lines. The string MUST only contain the actual base64 encoded data."
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "400": {
            "description": "Invalid data supplied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Unknown id",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflicting request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Unavailable",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete an OCES Certifikat on a specific Anvendersystem (user system)",
        "operationId": "deleteOcesCertifikatByAnvendersystemIdAndCertificate",
        "description": "Delete an OCES Certifikat on a specific `Anvendersystem` object.",
        "tags": [
          "Service"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the Anvendersystem (user system)",
            "type": "string",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "description": "The OCES Certifikat to delete",
            "required": true,
            "schema": {
              "type": "string",
              "title": "OcesCertifikat",
              "description": "A base64 encoded string representing the certificate for this Anvendersystem (user system). The string MUST be the certificate in PEM format, and MUST NOT contain Begin- and End lines. The string MUST only contain the actual base64 encoded data."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "400": {
            "description": "Invalid data supplied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Unknown id",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflicting request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Unavailable",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/Service": {
      "get": {
        "summary": "Get a list of all Service",
        "description": "Get a list of all Service",
        "tags": [
          "Service"
        ],
        "operationId": "getAllService",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful response. A list of id's of all Service objects",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Invalid data supplied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Unknown id",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflicting request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Unavailable",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create a new Service",
        "description": "Create a new `Service`",
        "tags": [
          "Service"
        ],
        "operationId": "createService",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The service to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Service"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "400": {
            "description": "Invalid data supplied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Unknown id",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflicting request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Unavailable",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/Service/{id}": {
      "get": {
        "summary": "Get a specific service",
        "description": "Get a specific `Service`",
        "tags": [
          "Service"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the service to get. The id must be the base64 encoded identifier of the service. See processing instructions for handling base64 encoding, to ensure interoperability.",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/Service"
            }
          },
          "400": {
            "description": "Invalid data supplied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Unknown id",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflicting request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Unavailable",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "Update a specific service",
        "description": "Update a specific `Service`",
        "tags": [
          "Service"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the service to update. The id must be the base64 encoded identifier of the service. See processing instructions for handling base64 encoding, to ensure interoperability.",
            "type": "string",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "description": "The update service",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Service"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "400": {
            "description": "Invalid data supplied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Unknown id",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflicting request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Unavailable",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a specific service",
        "description": "Delete a specific `Service`",
        "tags": [
          "Service"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the service to delete. The id must be the base64 encoded identifier of the service. See processing instructions for handling base64 encoding, to ensure interoperability.",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "400": {
            "description": "Invalid data supplied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Unknown id",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflicting request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Unavailable",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/Service/{id}/ServiceMetadata": {
      "put": {
        "summary": "Add service metadata to the list of service metadata on this service",
        "description": "Add service metadata to the list of service metadtaa on the specified `Service`",
        "tags": [
          "Service"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the service. The id must be the base64 encoded identifier of the service. See processing instructions for handling base64 encoding, to ensure interoperability.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The service metadata to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServiceMetadata"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "400": {
            "description": "Invalid data supplied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Unknown id",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflicting request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Unavailable",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/Service/{id1}/ServiceMetadata/{id2}": {
      "delete": {
        "summary": "Delete a version of service metadata",
        "description": "Delete a version of service metadata",
        "tags": [
          "Service"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id1",
            "in": "path",
            "description": "The id of the service. The id must be the base64 encoded identifier of the service. See processing instructions for handling base64 encoding, to ensure interoperability.",
            "required": true,
            "type": "string"
          },
          {
            "name": "id2",
            "in": "path",
            "description": "The id of the metadata to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "400": {
            "description": "Invalid data supplied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Unknown id",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflicting request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Unavailable",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/Servicesystemroller": {
      "get": {
        "summary": "Get all Servicesystemrolle",
        "description": "Get all Servicesystemrolle",
        "tags": [
          "Role"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful response. A list of id's of all Servicesystemroller (service system roles)",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Invalid data supplied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Unknown id",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflicting request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Unavailable",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create a new Servicesystemrolle",
        "description": "Create a new`Servicesystemrolle`",
        "tags": [
          "Role"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The Servicesystemrolle to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Servicesystemrolle"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "400": {
            "description": "Invalid data supplied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Unknown id",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflicting request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Unavailable",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/Servicesystemroller/{id}": {
      "get": {
        "summary": "Get a specific Servicesystemrolle",
        "description": "Get a specific `Servicesystemrolle`. The id must be the base64 encoded SAML2.0 attribute name of the SAML2.0 attribute. See processing instructions for handling base64 encoding, to ensure interoperability.",
        "tags": [
          "Role"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the Servicesystemrolle to get",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/Servicesystemrolle"
            }
          },
          "400": {
            "description": "Invalid data supplied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Unknown id",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflicting request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Unavailable",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "Update a specific Servicesystemrolle",
        "description": "Update a specific `Servicesystemrolle`. The id must be the base64 encoded SAML2.0 attribute name of the SAML2.0 attribute. See processing instructions for handling base64 encoding, to ensure interoperability.",
        "tags": [
          "Role"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the Servicesystemrolle to get",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The updated Servicesystemrolle",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Servicesystemrolle"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "400": {
            "description": "Invalid data supplied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Unknown id",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflicting request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Unavailable",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a specific Servicesystemrolle",
        "description": "Delete a specific `Servicesystemrolle`. The id must be the base64 encoded SAML2.0 attribute name of the SAML2.0 attribute. See processing instructions for handling base64 encoding, to ensure interoperability.",
        "tags": [
          "Role"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the Servicesystemrolle to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "400": {
            "description": "Invalid data supplied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Unknown id",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflicting request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Unavailable",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/Servicesystemroller/{id}/Aktiveringstidspunkt": {
      "put": {
        "summary": "Set the activation time for the specified service system role",
        "description": "Set the activation time for the specified service system role",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the service system role to add activation times for. The id must be the base64 encoded SAML2.0 attribute name of the SAML2.0 attribute. See processing instructions for handling base64 encoding, to ensure interoperability.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The activation time to set",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Aktiveringstidspunkt"
            }
          }
        ],
        "tags": [
          "Role"
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "400": {
            "description": "Invalid data supplied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Unknown id",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflicting request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Unavailable",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/Servicesystemroller/{id}/Dataafgraensningstyper": {
      "put": {
        "summary": "Add a Dataafgraensningstype to the Servicesystemrolle",
        "description": "Add a Dataafgraensningstype to the Servicesystemrolle",
        "tags": [
          "Role"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the service system role to add a Dataafgraensningstype for. The id must be the base64 encoded SAML2.0 attribute name of the SAML2.0 attribute. See processing instructions for handling base64 encoding, to ensure interoperability.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The Dataafgraensningstype to add",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Dataafgraensningstype"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "400": {
            "description": "Invalid data supplied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Unknown id",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflicting request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Unavailable",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/Servicesystemroller/{id1}/Dataafgraensningstyper/{id2}": {
      "delete": {
        "summary": "Delete a Dataafgraensningstype from the Servicesystemrolle",
        "description": "Delete a Dataafgraensningstype from the Servicesystemrolle",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id1",
            "in": "path",
            "description": "The id of the service system role. The id must be the base64 encoded SAML2.0 attribute name of the SAML2.0 attribute. See processing instructions for handling base64 encoding, to ensure interoperability.",
            "required": true,
            "type": "string"
          },
          {
            "name": "id2",
            "in": "path",
            "description": "The id of the Dataafgraensningstype to delete",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Role"
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "400": {
            "description": "Invalid data supplied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Unknown id",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflicting request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Unavailable",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/Service/{id}/RoleMappings": {
      "put": {
        "summary": "Add a role mapping on the specified service",
        "description": "Add `RoleMapping` items on the specified `Service`",
        "tags": [
          "Service"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the service to add role mappings for. The id must be the base64 encoded identifier of the service. See processing instructions for handling base64 encoding, to ensure interoperability.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The role mappings to add",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RoleMapping"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "400": {
            "description": "Invalid data supplied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Unknown id",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflicting request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Unavailable",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/Service/{id1}/RoleMappings/{id2}": {
      "delete": {
        "summary": "Delete a role mapping on the specified service",
        "description": "Delete a `RoleMapping` item on the specified `Service`",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id1",
            "in": "path",
            "description": "The id of the service to delete the role mapping from. The id must be the base64 encoded identifier of the service. See processing instructions for handling base64 encoding, to ensure interoperability.",
            "required": true,
            "type": "string"
          },
          {
            "name": "id2",
            "in": "path",
            "description": "The id of the role mapping to delete. The id must be the base64 encoded. See processing instructions for handling base64 encoding, to ensure interoperability.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Service"
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "400": {
            "description": "Invalid data supplied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Unknown id",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflicting request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Unavailable",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Aktiveringstidspunkt": {
      "description": "Aktiveringstidspunkt (activation time). A time ranges, when an object is enabled.",
      "properties": {
        "Sluttidspunkt": {
          "type": "string",
          "description": "The end time for this Aktiveringstidspunkt (activation time)"
        },
        "Starttidspunkt": {
          "type": "string",
          "description": "The start time for this Aktiveringstidspunkt (activation time)"
        }
      }
    },
    "Anvenderkontekst": {
      "description": "An Anvenderkontekst (user context)",
      "required": [
        "Cvr"
      ],
      "properties": {
        "Aktiveringstidspunkt": {
          "$ref": "#/definitions/Aktiveringstidspunkt"
        },
        "Cvr": {
          "type": "string",
          "description": "The CVR of the organization this Anvenderkontekst (user context) represents"
        }
      }
    },
    "Anvendersystem": {
      "description": "An Anvendersystem (service consumer)",
      "required": [
        "Id"
      ],
      "properties": {
        "Id": {
          "type": "string",
          "description": "The unique id of this Anvendsystem (user system). This property is required to e.g. delete an Anvendersystem (user system)."
        },
        "Anvenderkontekster": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Anvenderkontekst"
          }
        },
        "OcesCertifikater": {
          "type": "array",
          "description": "A list of certificates for this Anvendersystem (user system).",
          "items": {
            "title": "OcesCertifikat",
            "description": "A base64 encoded string representing the certificate for this Anvendersystem (user system). The string MUST be the certificate in PEM format, and MUST NOT contain Begin- and End lines. The string MUST only contain the actual base64 encoded data.",
            "type": "string"
          }
        },
        "RoleAssignments": {
          "description": "A list of RoleAssignments assigned to this Anvendersystem (service consumer).",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RoleAssignment"
          }
        },
        "ImpersonationAssignments": {
          "description": "A list of impersonation assignments assigned to this Anvendersystem (service consumer).",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ImpersonationAssignment"
          }
        }
      }
    },
    "Dataafgraensning": {
      "description": "A Dataafgraensning (data restriction) comprises a DRT and DRV, and can be thought of as an instantation of DRT",
      "required": [
        "DataafgraensningstypeId"
      ],
      "properties": {
        "DataafgraensningstypeId": {
          "description": "The Dataafgraensningstype (data restriction type) for this Dataafgraensnings (data restriction). This is the ID of the Dataafgraensningstype, which is defined as a URL.",
          "type": "string",
          "format": "uuid"
        },
        "Values": {
          "description": "The values",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Dataafgraensningstype": {
      "description": "A Dataafgraensningstype (data restriction type)",
      "required": [
        "Id"
      ],
      "properties": {
        "Id": {
          "description": "The Id (namespace) of this Dataafgr√¶nsningstype (data restriction type)",
          "type": "string"
        },
        "SyntaxDefinition": {
          "description": "Definition of the syntax that is used to define this data restriction",
          "type": "string"
        },
        "PresentationPreference": {
          "description": "The presentation preference of this data restriction type",
          "type": "string"
        },
        "ValidationService": {
          "description": "The URL of a validation service",
          "type": "string"
        },
        "PresentationName": {
          "description": "The presentation name of this data restriction type",
          "type": "string"
        },
        "Description": {
          "description": "A description of this data restriction type",
          "type": "string"
        }
      }
    },
    "Dataafgraensningsvaerdi": {
      "description": "A Dataafgraensningsvaerdi (data restriction value) for a Dataafgraensningstype (data restriction type)",
      "required": [
        "DataafgraensningstypeId",
        "Values"
      ],
      "properties": {
        "DataafgraensningstypeId": {
          "description": "The Dataafgraensningstype (data restriction type) for this Dataafgraensningsvaerdi (data restriction value). This is the ID of the Dataafgraensningstype, which is defined as a URL.",
          "type": "string"
        },
        "Values": {
          "description": "The values",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Error": {
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "ImpersonationAssignment": {
      "description": "The relation between an Anvenderkontekst (user context) and a certificate for an Anvendersystem (service consumer). An impersonation assignment is a relation between a Anvendersystem (service consumer) as represented by a certificate, and a user context (Anvenderkontekst) for which another Anvendersystem (service consumer) may request a proxy-OnBehalfOf token. The ImpersonationAssignment is added to the Anvendersystem (service consumer) that may request the token.",
      "required": [
        "Aktiveringstidspunkt",
        "Anvenderkontekst",
        "OcesCertificate"
      ],
      "properties": {
        "Anvenderkontekst": {
          "type": "string",
          "description": "The Anvenderkontekst (user context) this role assignment applies to. The Anvenderkontekst is specified as the CVR of the organization."
        },
        "OcesCertificate": {
          "type": "string",
          "description": "A base64 encoded string representing the certificate for this Anvendersystem (user system). The string MUST be the certificate in PEM format, and MUST NOT contain Begin- and End lines. The string MUST only contain the actual base64 encoded data."
        },
        "Aktiveringstidspunkt": {
          "$ref": "#/definitions/Aktiveringstidspunkt"
        }
      }
    },
    "RoleAssignment": {
      "description": "The relation between an Anvendersystem (user system) and assigned Servicesystemrolle for a Service",
      "required": [
        "Id",
        "Anvenderkontekst",
        "ServiceId",
        "ServicesystemrolleId"
      ],
      "properties": {
        "Id": {
          "type": "string",
          "description": "The unique id of this RoleAssignment. This property is generated by the caller that provisions this role assignment, and is used again by this caller to delete the role assignment. The value of this Id must be URL safe, since it's used in the path in a DELETE request to delete the role assignment."
        },
        "Anvenderkontekst": {
          "type": "string",
          "description": "The Anvenderkontekst (user context) this role assignment applies to. The Anvenderkontekst is specified as the CVR of the organization."
        },
        "Dataafgraensningsvaerdier": {
          "type": "array",
          "description": "A list of data restriction values. A data restriction value contains a reference to the data restriction type for that value.",
          "items": {
            "$ref": "#/definitions/Dataafgraensningsvaerdi"
          }
        },
        "ServiceId": {
          "type": "string",
          "description": "The Id of the service this role assignment applies to"
        },
        "ServicesystemrolleId": {
          "type": "string"
        },
        "IssuedAnvenderkontekst": {
          "type": "string",
          "description": "The issued Anvenderkontekst (user context) for this role assignment. If issued user context IS specified, then the scope on the privilegegroup for this role assignment will be set to this value. If the issue user context is NOT specified, then the scope of the privilege group will be set to the value of the Anvenderkontekst (user context) on this role assignment."
        }
      }
    },
    "RoleMapping": {
      "description": "Defines a mapping between a job function role, and a Brugersystemrolle (user system role) including data restrictions.",
      "required": [
        "JobfunktionsrolleId",
        "BrugersystemrolleId"
      ],
      "properties": {
        "Id": {
          "type": "string",
          "description": "The Id of this role mapping. The Id is a compound id comprised of the id of the Jobfunktionsrolle (job function role), and the id's of the Brugersystemroller (user system roles)"
        },
        "JobfunktionsrolleId": {
          "description": "The Id of the job function role to map from",
          "type": "string"
        },
        "BrugersystemrolleId": {
          "description": "The Id of the Brugersystemrolle to map to",
          "type": "string"
        },
        "Dataafgraensninger": {
          "description": "A list of Dataafgraensninger (data restrictions) for this role mapping. The DRT for each Dataafgraensning element has to match one or more Brugersystemrolle in this RoleMapping.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Dataafgraensning"
          }
        }
      }
    },
    "ServiceMetadata": {
      "description": "Metadata for a service",
      "required": [
        "Id",
        "Aktiveringstidspunkt",
        "Identifier"
      ],
      "properties": {
        "Id": {
          "type": "string",
          "description": "The Id of this SAML metadata document"
        },
        "Aktiveringstidspunkt": {
          "$ref": "#/definitions/Aktiveringstidspunkt"
        },
        "Identifier": {
          "type": "string",
          "description": "The identifier for this service"
        }
      }
    },
    "Service": {
      "description": "A service",
      "required": [
        "Id",
        "ServiceType"
      ],
      "properties": {
        "Id": {
          "type": "string",
          "description": "The SAML2.0 EntityId of the service. The EntityId must be globally unique within the federation, and cannot be shared by any other service, identity provider or user system."
        },
        "RoleMappings": {
          "description": "A list of role mappings for this Service",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RoleMapping"
          }
        },
        "ServiceType": {
          "type": "string",
          "description": "The type of this service"
        },
        "ServiceMetadata": {
          "description": "A list of service metadata for this service",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceMetadata"
          }
        }
      }
    },
    "Servicesystemrolle": {
      "description": "Servicesystemrolle (service system role). A Servicesystemrolle (service system role) is related to exactly one `Service`. A `Service` can have 0 or more `Servicesystemrolle` related.",
      "required": [
        "Id"
      ],
      "properties": {
        "Id": {
          "type": "string",
          "description": "The id of the role."
        },
        "Aktiveringstidspunkt": {
          "$ref": "#/definitions/Aktiveringstidspunkt"
        },
        "Dataafgraensningstyper": {
          "description": "A list of Dataafgraensningstyper (data restriction types) this Servicesystemrolle supports",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Dataafgraensningstype"
          }
        }
      }
    }
  }
}
